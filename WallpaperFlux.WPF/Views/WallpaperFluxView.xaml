<views:MvxWpfView x:Name="WallpaperView"
    xmlns:views="clr-namespace:MvvmCross.Platforms.Wpf.Views;assembly=MvvmCross.Platforms.Wpf"
    xmlns:mvx="clr-namespace:MvvmCross.Platforms.Wpf.Binding;assembly=MvvmCross.Platforms.Wpf"
    x:Class="WallpaperFlux.WPF.Views.WallpaperFluxView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:util="clr-namespace:WallpaperFlux.WPF.Util"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:local="clr-namespace:WallpaperFlux.WPF.Views"
    xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
    xmlns:mvvmCross="clr-namespace:MvvmCross;assembly=MvvmCross"
    xmlns:models="clr-namespace:WallpaperFlux.Core.Models;assembly=WallpaperFlux.Core"
    xmlns:extensions="clr-namespace:LanceTools.WPF.Extensions;assembly=LanceTools.WPF"
    xmlns:ffme="clr-namespace:Unosquare.FFME;assembly=ffme.win"
    xmlns:core="clr-namespace:WallpaperFlux.Core;assembly=WallpaperFlux.Core"
    xmlns:controlModels="clr-namespace:WallpaperFlux.Core.Models.Controls;assembly=WallpaperFlux.Core"
    xmlns:system="clr-namespace:System;assembly=System.Runtime"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:tagging="clr-namespace:WallpaperFlux.Core.Models.Tagging;assembly=WallpaperFlux.Core"
    mc:Ignorable="d" FontSize="12" FontFamily="Segoe UI"
    d:DesignHeight="450" d:DesignWidth="800"
    SizeChanged="WallpaperFluxView_OnSizeChanged_UpdateInspectorHeight">

    <!-- Might want to take a look at this in the future: https://stackoverflow.com/questions/24925421/execute-command-in-viewmodel-from-mouse-event -->
    <!-- ? Also this to potentially remove some xaml.cs code and other IoC complications https://stackoverflow.com/questions/47199489/wpf-how-to-bind-mousedown-command-action-to-label -->

    <views:MvxWpfView.Resources>
        <ResourceDictionary>
            <system:Double x:Key="InspectorWidth">375</system:Double>
            <system:Double x:Key="InspectorCategoryHeight">400</system:Double>
        </ResourceDictionary>
    </views:MvxWpfView.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <!--<ColumnDefinition Width="{adonisUi:Space 1}"/>-->
            <ColumnDefinition Width="0"/>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="0"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Toolbar -->
        <Menu Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="10" Padding="2">
            <!-- File -->
            <MenuItem Header="File">
                <MenuItem Header="Load Theme" mvx:Bi.nd="Command LoadThemeCommand"/>
                <MenuItem Header="Save Theme [Not implemented]"/>
            </MenuItem>

            <!-- Edit -->
            <MenuItem Header="Edit">
                <MenuItem Header="Dummy Item"/>
            </MenuItem>

            <!-- Settings -->
            <MenuItem Header="Settings">
                <!-- Set Max Rank -->
                <MenuItem Header="Set Max Rank" mvx:Bi.nd="Command Theme.Settings.UpdateMaxRankCommand">
                    <MenuItem.ToolTip>
                        <ToolTip>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Current Max Rank: "/>
                                <TextBlock Text="{Binding Theme.Settings.ThemeSettings.MaxRank}"/>
                            </StackPanel>
                        </ToolTip>
                    </MenuItem.ToolTip>
                </MenuItem>
                <MenuItem Header="Toggle Light/Dark Theme [Not implemented]"/>
                <MenuItem Header="More Settings" Click="MenuItem_MoreSettings_Click"/>
            </MenuItem>

            <!-- View -->
            <MenuItem Header="View">
                <MenuItem Header="Dummy Item"/>
            </MenuItem>

            <!-- Go -->
            <!-- Opens folders / goes to files -->
            <MenuItem Header="Go">
                <MenuItem Header="Go To Theme File [Not implemented]"/>
            </MenuItem>

            <!-- Tools -->
            <MenuItem Header="Tools">
                <MenuItem Header="Inspect Rank Distribution [Not Implemented]"/>
            </MenuItem>

            <!-- Help -->
            <MenuItem Header="Help">
                <!--<MenuItem Header="Check for Updates"/>-->
                <!--<MenuItem Header="Donate"/>-->
                <MenuItem Header="About [Not implemented] [Open a page of links to relevant info]"/>
                <MenuItem Header="Open Repository Page [Not implemented]"/>
            </MenuItem>

            <!-- Wallpaper -->
            <!-- You should keep both set of buttons for quick access, just put the Next & Previous Wallpaper buttons behind their own tab -->
            <MenuItem Header="Wallpaper">
                <MenuItem Header="Next Wallpaper" mvx:Bi.nd="Command NextWallpaperCommand" IsEnabled="{Binding CanNextWallpaper}" />
                <MenuItem Header="Previous Wallpaper" mvx:Bi.nd="Command PreviousWallpaperCommand" IsEnabled="{Binding CanPreviousWallpaper}"/>
                <MenuItem Header="Cycle Wallpapers [Not implemented]"/>
            </MenuItem>

            <!-- Tagging -->
            <MenuItem Header="Tagging">
                <MenuItem Header="Open Tag View" Click="MenuItem_OpenTagWindow_Click"/>
            </MenuItem>
        </Menu>

        <Separator Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="10"/>

        <!-- Core Button Controls
        <StackPanel Grid.Row="3" Grid.Column="1" Orientation="Horizontal">
            <Button mvx:Bi.nd="Command NextWallpaperCommand" IsEnabled="{Binding CanNextWallpaper}" 
                    Width="135" Height="25" Content="Next Wallpaper" Margin="5"/>
            <Button mvx:Bi.nd="Command PreviousWallpaperCommand" IsEnabled="{Binding CanPreviousWallpaper}" 
                    Width="135" Height="25" Content="Previous Wallpaper" Margin="5"/>
            <Button mvx:Bi.nd="Command LoadThemeCommand" 
                    Width="135" Height="25" Content="Load Theme" Margin="5"/>
        </StackPanel>
        -->

        <!-- Image Folders -->
        <GroupBox Grid.Row="4" Grid.Column="1" adonisExtensions:LayerExtension.IncreaseLayer="True" Margin="0 5 0 5">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0"/> <!-- Remove this at some point, will need to adjust columns -->
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="{adonisUi:Space 1}"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Header -->
                <!--
                <TextBlock Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" Text="Folders" HorizontalAlignment="Center">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FaintHeader}"/>
                    </TextBlock.Style>
                </TextBlock>
                -->

                <!-- Folder Buttons -->
                <Button mvx:Bi.nd="Command AddFolderCommand" Grid.Row="1" Grid.Column="1" Width="135" Height="25" Content="Add Folder" Margin="10"
                    adonisExtensions:CursorSpotlightExtension.BorderBrush="LimeGreen"
                    adonisExtensions:RippleExtension.BackgroundBrush="LimeGreen" HorizontalAlignment="Stretch"/>
                <Button mvx:Bi.nd="Command RemoveFolderCommand"
                        Grid.Row="1" Grid.Column="2" Width="135" Height="25" Content="Remove Folder" Margin="5" 
                        IsEnabled="{Binding CanRemoveWallpaper}"
                        adonisExtensions:CursorSpotlightExtension.BorderBrush="Red"
                        adonisExtensions:RippleExtension.BackgroundBrush="Red"/>

                <!-- Folder List -->
                <GroupBox Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3"  adonisExtensions:LayerExtension.IncreaseLayer="True">
                    <ListBox Width="400" Height="300"
                             ItemsSource="{Binding ImageFolders}" SelectedItem="{Binding SelectedImageFolder}" SelectionMode="Extended"
                             adonisExtensions:ScrollViewerExtension.HideScrollBarsUntilMouseOver="True"
                             adonisExtensions:ScrollViewerExtension.VerticalScrollBarPlacement="Overlay"
                             adonisExtensions:ScrollViewerExtension.HorizontalScrollBarPlacement="Overlay">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <CheckBox VerticalAlignment="Center" Margin="0 0 5 0" IsChecked="{Binding Active}"/>
                                    <TextBlock Text="{Binding Path}" FontSize="14">
                                        <TextBlock.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem Header="View Folder" mvx:Bi.nd="Command ViewFolderCommand"/> <!-- Command found in ImageFolderModel -->
                                            </ContextMenu>
                                        </TextBlock.ContextMenu>
                                    </TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </GroupBox>
            </Grid>
        </GroupBox>

        <!-- Display Settings -->
        <GroupBox Grid.Row="5" Grid.Column="1" adonisExtensions:LayerExtension.IncreaseLayer="True" Margin="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0"/> <!-- Remove this at some point, will need to adjust columns -->
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Header & Sync -->
                <TextBlock Text="Display Settings" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" HorizontalAlignment="Center"  Margin="5" FontWeight="Bold"/>
                <Button  Content="Sync" IsEnabled="{Binding CanSync}" mvx:Bi.nd="Command SyncCommand" Grid.Row="2" Grid.Column="1" Margin="5">
                    <Button.ToolTip>
                        'Syncing' display settings allows wallpapers to change simultaneously across multiple monitors
                    </Button.ToolTip>
                </Button>

                <!-- Display Setting Template List -->
                <GroupBox  Grid.Row="3" Grid.Column="1" adonisExtensions:LayerExtension.IncreaseLayer="True">
                    <ListBox Width="310" MaxHeight="110"
                             ItemsSource="{Binding DisplaySettings}"  SelectedItem="{Binding SelectedDisplaySetting}"
                             adonisExtensions:ScrollViewerExtension.HideScrollBarsUntilMouseOver="True"
                             adonisExtensions:ScrollViewerExtension.VerticalScrollBarPlacement="Overlay"
                             adonisExtensions:ScrollViewerExtension.HorizontalScrollBarPlacement="Overlay"
                             adonisExtensions:ScrollViewerExtension.HorizontalScrollBarExpansionMode="NeverExpand">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <!-- Display Index -->
                                    <TextBlock Text="{Binding DisplayIndex, StringFormat=Display {0}}" Margin="8,2,8,2"/>

                                    <!-- Interval Settings -->
                                    <StackPanel Margin="8,2,8,2" Orientation="Horizontal">

                                        <!-- Interval Value -->
                                        <TextBox MinWidth="35" Margin="0 0 2 0"
                                                 Text="{Binding DisplayInterval, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                 IsEnabled="{Binding CanSetInterval}" 
                                                 ToolTip="Interval Value">
                                            <TextBox.Style>
                                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxNumInput}"/>
                                            </TextBox.Style>
                                        </TextBox>

                                        <!-- Interval Type -->
                                        <ComboBox ItemsSource="{Binding Source={extensions:Enumeration {x:Type core:IntervalType}}}"
                                                  DisplayMemberPath="Description"
                                                  SelectedValue="{Binding DisplayIntervalType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                  SelectedValuePath="Value">
                                            <ComboBox.ToolTip>
                                                <ToolTip Content="Interval Type"/>
                                            </ComboBox.ToolTip>
                                        </ComboBox>
                                    </StackPanel>

                                    <!-- Style Setting -->
                                    <ComboBox Margin="5,2,5,2"
                                              ItemsSource="{Binding Source={extensions:Enumeration {x:Type core:WallpaperStyle}}}"
                                              DisplayMemberPath="Description"
                                              SelectedValue="{Binding DisplayStyle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              SelectedValuePath="Value">
                                        <ComboBox.ToolTip>
                                            <ToolTip Content="Style"/>
                                        </ComboBox.ToolTip>
                                    </ComboBox>

                                    <!-- Time Remaining -->
                                    <TextBlock Margin="12, 2, 8, 2"
                                               Text="{Binding DisplayTimerCurrent, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </StackPanel>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </GroupBox>
            </Grid>
        </GroupBox>

        <GridSplitter Grid.Row="4" Grid.Column="2" Width="5" ResizeDirection="Columns"/>

        <!-- Image Selector / Image Inspector -->
        <GroupBox Grid.Row="4" Grid.RowSpan="2" Grid.Column="3" adonisExtensions:LayerExtension.IncreaseLayer="True" Margin=" 0 5 5 5">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0"/>
                    <!--<ColumnDefinition Width="4*"/> Reminder that you can use this for proportions -->
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Header Controls -->
                <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Center">
                    <!-- TODO Standardize the Height, Margin, and maybe the Width here (Give them variables) -->
                    <Button Width="115" Height="25" Content="Select Image(s)" IsEnabled="{Binding CanSelectImages}" Margin="5 0 5 0" Command="{Binding SelectImagesCommand}" />
                    <Button Width="60" Height="25" Content="Inspect" Margin="5 0 5 0" Command="{Binding ToggleInspectorCommand}"/>
                    <Button Width="60" Height="25" Content="Clear" Margin="5 0 5 0" Command="{Binding ClearImagesCommand}"/>
                    <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"/>
                    <Button Width="75" Height="25" Content="Rename" Margin="5 0 5 0"/>
                    <Button Width="75" Height="25" Content="Move" Margin="5 0 5 0"/>
                    <Button Width="75" Height="25" Content="Delete" Margin="5 0 5 0"/>
                    <Button Width="75" Height="25" Content="Rank" Margin="5 0 5 0"/>
                    <Button Width="115" Height="25" Content="Paste Tagboard" Margin="5 0 5 0" Command="{Binding PasteTagBoardCommand}"/>
                    <CheckBox Content="Apply to all" Margin="5" ToolTip="Will apply the given modificationt to all images in this selection. Another form of 'Select All'"/>
                    <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"/>
                    <Button Width="75" Height="25" Content="Select All" Margin="5 0 5 0" Command="{Binding SelectAllImagesCommand}"/>
                    <Button Width="75" Height="25" Content="Deselect" Margin="5 0 5 0" Command="{Binding DeselectImagesCommand}"/>
                </StackPanel>

                <!-- Selection Info -->
                <TextBlock x:Name="SelectedImagePathTextBox" Text="{Binding SelectedImagePathText, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                           Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" HorizontalAlignment="Center"/>
                <TextBlock x:Name="SelectedImageDimensionsTextBox" Text="{Binding SelectedImageDimensionsText, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                           Grid.Row="3" Grid.Column="1" HorizontalAlignment="Center" />

                <!-- Image Selector Tab Control -->
                <!-- !<GroupBox Grid.Row="4" Grid.Column="1" Width="650" Height="525" adonisExtensions:LayerExtension.IncreaseLayer="True" Margin="3">-->
                <GroupBox Grid.Row="4" Grid.Column="1" 
                          adonisExtensions:LayerExtension.IncreaseLayer="True" Margin="3">
                    <TabControl x:Name="ImageSelectorTabControl" ItemsSource="{Binding ImageSelectorTabs}"
                                SizeChanged="ImageSelectorTabControl_OnSizeChanged" SelectionChanged="ImageSelectorTabControl_OnSelectionChanged"
                                SelectedItem="{Binding SelectedImageSelectorTab, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >

                        <!-- Item Template [Header] -->
                        <TabControl.ItemTemplate>
                            <DataTemplate DataType="controlModels:ImageSelectorTabModel">
                                <TextBlock Text="{Binding TabIndex}"/>
                            </DataTemplate>
                        </TabControl.ItemTemplate>

                        <!-- Control Template [Enables Scrolling for the Tabs] -->
                        <TabControl.Template>
                            <ControlTemplate TargetType="{x:Type TabControl}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                                        <TabPanel x:Name="HeaderPanel" IsItemsHost="True" Margin="0,4,0,0"/>
                                    </ScrollViewer>
                                    <ContentPresenter x:Name="PART_SelectedContentHost" Margin="4" ContentSource="SelectedContent" Grid.Row="1"/>
                                </Grid>
                            </ControlTemplate>
                        </TabControl.Template>

                        <!-- Content Template [Core Content/ListBox] -->
                        <TabControl.ContentTemplate>
                            <DataTemplate DataType="controlModels:ImageSelectorTabModel">
                                <!-- Image List Box -->
                                <ListBox ItemsSource="{Binding Items}" 
                                         SelectedItem="{Binding SelectedImage}"
                                         SelectionMode="Extended" SelectionChanged="ImageSelectorTabListBox_SelectionChanged">

                                    <!-- Wrap Setup -->
                                    <ListBox.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel Width="{Binding ImageSelectorTabWrapWidth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                       ItemWidth="150" ItemHeight="250" IsItemsHost="True"/>
                                        </ItemsPanelTemplate>
                                    </ListBox.ItemsPanel>

                                    <!-- Item Container Style [Handles Selection of multiple items by binding to the IsSelected property of the object] -->
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        </Style>
                                    </ListBox.ItemContainerStyle>

                                    <!-- // Image Info Item Template // -->
                                    <ListBox.ItemTemplate>
                                        <DataTemplate DataType="models:ImageModel">
                                            <GroupBox HorizontalAlignment="Center" MouseDown="ImageSelector_ListBoxItem_OnMouseDown">
                                                <StackPanel Focusable="False">

                                                    <!-- //// Binding to ImageModel //// -->
                                                    <ContentControl Content="{Binding}" HorizontalAlignment="Center">
                                                        <!-- Resources -->
                                                        <ContentControl.Resources>
                                                            <!-- Remember that the Binding context here refers to what's given in the Content of the ContentTemplate, not what ReSharper says -->

                                                            <!-- // StaticOrGIFTemplate // -->
                                                            <DataTemplate x:Key="StaticOrGIFTemplate">
                                                                <Image ToolTipService.ShowDuration="{StaticResource MaxInt32}"
                                                               Width="{Binding ImageSelectorThumbnailWidth}"
                                                               Height="{Binding ImageSelectorThumbnailHeight}"
                                                               Margin="3"
                                                               HorizontalAlignment="Center">
                                                                    <!-- TODO Turn this segment into an event that loads all image sources on one separate thread one by one -->
                                                                    <Image.Source>
                                                                        <!-- I'm sure that you only need to decode either Pixel Height or Width -->
                                                                        <BitmapImage
                                                                        DecodePixelHeight="{Binding ImageSelectorThumbnailHeight}"
                                                                        RenderOptions.BitmapScalingMode="LowQuality"
                                                                        UriSource="{Binding Path}">
                                                                        </BitmapImage>
                                                                    </Image.Source>

                                                                    <!-- Image Tooltip-->
                                                                    <Image.ToolTip>
                                                                        <ContentControl Content="{Binding}">
                                                                            <!-- Resources -->
                                                                            <ContentControl.Resources>
                                                                                <!-- Static -->
                                                                                <DataTemplate x:Key="StaticTemplate">
                                                                                    <Image Source="{Binding Path}"/>
                                                                                </DataTemplate>
                                                                                <!-- GIF -->
                                                                                <DataTemplate x:Key="GIFTemplate">
                                                                                    <ffme:MediaElement 
                                                                                UnloadedBehavior="Manual" LoadedBehavior="Play" LoopingBehavior="Play" Loaded="MediaElement_OnLoaded"/>
                                                                                </DataTemplate>
                                                                            </ContentControl.Resources>
                                                                            <!-- Template Control -->
                                                                            <ContentControl.ContentTemplate>
                                                                                <DataTemplate>
                                                                                    <!-- Default Template -->
                                                                                    <ContentControl Name="cc" Content="{Binding }" 
                                                                                ContentTemplate="{StaticResource StaticTemplate}"/>
                                                                                    <!-- Triggers -->
                                                                                    <DataTemplate.Triggers>
                                                                                        <DataTrigger Binding="{Binding IsGIF}" Value="True">
                                                                                            <!-- Sets the ContentTemplate to be GIFTemplate instead of StaticTemplate -->
                                                                                            <Setter TargetName="cc" Property="ContentTemplate" Value="{StaticResource GIFTemplate}"/>
                                                                                        </DataTrigger>
                                                                                    </DataTemplate.Triggers>
                                                                                </DataTemplate>
                                                                            </ContentControl.ContentTemplate>
                                                                        </ContentControl>
                                                                    </Image.ToolTip>

                                                                    <!-- Image Context Menu -->
                                                                    <!-- !Changes made here need to be made to the Media Context Menu as well!!! -->
                                                                    <Image.ContextMenu>
                                                                        <ContextMenu>
                                                                            <MenuItem Header="Open File Location" mvx:Bi.nd="Command ViewFileCommand"/>
                                                                            <MenuItem Header="Open File" mvx:Bi.nd="Command OpenFileCommand"/>
                                                                            <MenuItem Header="Set As Wallpaper" mvx:Bi.nd="Command SetWallpaperCommand"/>
                                                                            <Separator/>
                                                                            <MenuItem Header="Rename"/>
                                                                            <MenuItem Header="Move"/>
                                                                            <MenuItem Header="Delete"/>
                                                                            <MenuItem Header="Rank"/>
                                                                            <MenuItem Header="Paste Tagboard" Command="{Binding PasteTagBoardCommand}"/>
                                                                        </ContextMenu>
                                                                    </Image.ContextMenu>
                                                                </Image>
                                                            </DataTemplate>

                                                            <!-- // VideoTemplate // -->
                                                            <DataTemplate x:Key="VideoTemplate">
                                                                <GroupBox adonisExtensions:LayerExtension.IncreaseLayer="False"
                                                                  Width="{Binding ImageSelectorThumbnailWidthVideo}"
                                                                  Height="{Binding ImageSelectorThumbnailHeight}" 
                                                                  ToolTipService.ShowDuration="{StaticResource MaxInt32}"
                                                                  HorizontalAlignment="Center">

                                                                    <!-- The media element will fail to process the Tooltip & Context Menu, so we used a GroupBox -->
                                                                    <!-- Media Element Tooltip-->
                                                                    <GroupBox.ToolTip>
                                                                        <ffme:MediaElement UnloadedBehavior="Manual" LoadedBehavior="Play" LoopingBehavior="Play" 
                                                                            Loaded="MediaElement_OnLoaded" Unloaded="MediaElement_OnUnloaded" />
                                                                    </GroupBox.ToolTip>
                                                                    <!-- Media Element Context Menu-->
                                                                    <!-- !Changes made here need to be made to the Image Context Menu as well!!! -->
                                                                    <GroupBox.ContextMenu>
                                                                        <ContextMenu>
                                                                            <MenuItem Header="Open File Location" mvx:Bi.nd="Command ViewFileCommand"/>
                                                                            <MenuItem Header="Open File" mvx:Bi.nd="Command OpenFileCommand"/>
                                                                            <MenuItem Header="Set As Wallpaper" mvx:Bi.nd="Command SetWallpaperCommand"/>
                                                                            <Separator/>
                                                                            <MenuItem Header="Rename"/>
                                                                            <MenuItem Header="Move"/>
                                                                            <MenuItem Header="Delete"/>
                                                                            <MenuItem Header="Rank"/>
                                                                            <MenuItem Header="Paste Tagboard" Command="{Binding PasteTagBoardCommand}"/>
                                                                            <Separator/>
                                                                            <MenuItem Header="Volume" mvx:Bi.nd="Command SetVolumeCommand"/>
                                                                            <MenuItem Header="Speed" mvx:Bi.nd="Command SetSpeedCommand"/>
                                                                            <MenuItem Header="Override Max Loop Count"/>
                                                                            <MenuItem Header="Override Max Video Timer"/>
                                                                        </ContextMenu>
                                                                    </GroupBox.ContextMenu>
                                                                    <!-- Displays the first frame/thumbnail of videos due to the Loaded event -->
                                                                    <ffme:MediaElement UnloadedBehavior="Play"  LoadedBehavior="Pause" Loaded="MediaElement_OnLoaded_SimulateThumbnail"/>
                                                                </GroupBox>
                                                                <!--</Border>-->
                                                            </DataTemplate>
                                                        </ContentControl.Resources>

                                                        <!-- // Template Control // -->
                                                        <ContentControl.ContentTemplate>
                                                            <DataTemplate>
                                                                <!-- Default Control -->
                                                                <ContentControl Name="cc" Content="{Binding }" ContentTemplate="{StaticResource StaticOrGIFTemplate}"/>
                                                                <!-- Triggers -->
                                                                <DataTemplate.Triggers>
                                                                    <!-- If IsVideo, use the VideoTemplate instead -->
                                                                    <DataTrigger Binding="{Binding IsVideo}" Value="True">
                                                                        <Setter TargetName="cc" Property="ContentTemplate" Value="{StaticResource VideoTemplate}"/>
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </ContentControl.ContentTemplate>
                                                    </ContentControl>

                                                    <!-- Edit Button -->
                                                    <Button Content="Edit" Width="75" Height="{Binding ImageSelectorSettingsHeight}" Margin="3" 
                                                        HorizontalAlignment="Center"/>

                                                    <!-- Rank Handler Panel -->
                                                    <StackPanel Orientation="Horizontal" Margin="3" Focusable="False" HorizontalAlignment="Center" >
                                                        <!-- Decrease Rank Button -->
                                                        <Button mvx:Bi.nd = "Command DecreaseRankCommand" 
                                                                Width="25" Height="{Binding ImageSelectorSettingsHeight}" Margin="3" 
                                                                adonisExtensions:CursorSpotlightExtension.BorderBrush="Red"
                                                                adonisExtensions:RippleExtension.BorderBrush="Red">
                                                            <TextBlock Text="-" FontSize="{Binding ImageSelectorSettingsHeight}"
                                                               Foreground="Red" FontWeight="Bold" Margin="0 -10 0  0"/>
                                                        </Button>
                                                        <!-- Rank TextBox -->
                                                        <TextBox Text="{Binding Rank, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                         Width="50" Height="{Binding ImageSelectorSettingsHeight}" Margin="3"
                                                         HorizontalContentAlignment="Center">
                                                            <TextBox.Style>
                                                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxNumInput}"/>
                                                            </TextBox.Style>
                                                        </TextBox>
                                                        <!-- Increase Rank Button -->
                                                        <Button mvx:Bi.nd = "Command IncreaseRankCommand"
                                                                Width="25" Height="{Binding ImageSelectorSettingsHeight}" Margin="3" 
                                                                adonisExtensions:CursorSpotlightExtension.BorderBrush="LimeGreen"
                                                                adonisExtensions:RippleExtension.BorderBrush="LimeGreen">
                                                            <TextBlock Text="+" FontSize="{Binding ImageSelectorSettingsHeight}"
                                                               Foreground="LimeGreen" FontWeight="Bold" Margin="-5 -10 0  0"/>
                                                        </Button>
                                                    </StackPanel>
                                                </StackPanel>
                                            </GroupBox>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </DataTemplate>
                        </TabControl.ContentTemplate>
                    </TabControl>
                </GroupBox>

                <!-- Image Inspector -->
                <!--
                <Expander Grid.Row="4" Grid.Column="2"  Header="Inspect" ExpandDirection="Right">
                    <!- TODO Retire this StackPanel later, just here for reminders ->
                    <StackPanel>
                        <TextBlock Text="Some buttons and perhaps the image itself, include stuff that allows for image-independent control"/>
                        <TextBlock Text="Tags, allow for tags to ignore naming restrictions here"/>
                    </StackPanel>
 
                </Expander>
                -->

            </Grid>
        </GroupBox>

        <!-- Image Inspector Drawer -->
        <hc:Drawer Dock="Left" ShowMode="Cover" IsOpen="{Binding InspectorToggle}" x:Name="TagBoardDrawer">
            <ScrollViewer Height="{Binding InspectorHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                <GroupBox Width="{StaticResource InspectorWidth}"
                          adonisExtensions:ScrollViewerExtension.HideScrollBarsUntilMouseOver="True"
                          adonisExtensions:ScrollViewerExtension.VerticalScrollBarPlacement="Overlay"
                          adonisExtensions:ScrollViewerExtension.VerticalScrollBarExpansionMode="ExpandOnHover"
                          ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                          BorderBrush="DarkGray" BorderThickness="2">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <!--<ColumnDefinition Width="{adonisUi:Space 1}"/>-->
                            <ColumnDefinition Width="0"/>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="1" Grid.Column="2" HorizontalAlignment="Center" Text="Inspector" FontWeight="Medium" Margin="0 0 0 5">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FaintHeader}"/>
                            </TextBlock.Style>
                        </TextBlock>
                        <Button Grid.Row="1" Grid.Column="3" HorizontalAlignment="Right" Content="X" Command="{Binding CloseInspectorCommand}" 
                            Margin="5 0 5 0" Foreground="Red" FontSize="16" FontWeight="Bold" adonisExtensions:LayerExtension.Layer="1"/>

                        <!-- Image Viewer -->
                        <GroupBox  Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3"
                               Margin="0 5 0 0" HorizontalAlignment="Center">
                            <StackPanel Focusable="False">

                                <!-- //// Binding to ImageModel //// -->
                                <ContentControl Content="{Binding SelectedImage}" HorizontalAlignment="Center">
                                    <!-- Resources -->
                                    <ContentControl.Resources>
                                        <!-- Remember that the Binding context here refers to what's given in the Content of the ContentTemplate, not what ReSharper says -->

                                        <!-- // StaticOrGIFTemplate // -->
                                        <DataTemplate x:Key="StaticOrGIFTemplate">
                                            <ContentControl Content="{Binding}">
                                                <!-- Resources -->
                                                <ContentControl.Resources>
                                                    <!-- Static -->
                                                    <DataTemplate x:Key="StaticTemplate">
                                                        <Image Source="{Binding Path}"/>
                                                    </DataTemplate>
                                                    <!-- GIF -->
                                                    <DataTemplate x:Key="GIFTemplate">
                                                        <ffme:MediaElement UnloadedBehavior="Manual" LoadedBehavior="Play" LoopingBehavior="Play" Loaded="MediaElement_OnLoaded"/>
                                                    </DataTemplate>
                                                </ContentControl.Resources>
                                                <!-- Template Control -->
                                                <ContentControl.ContentTemplate>
                                                    <DataTemplate>
                                                        <!-- Default Template -->
                                                        <ContentControl Name="cc" Content="{Binding }" 
                                                                                ContentTemplate="{StaticResource StaticTemplate}"/>
                                                        <!-- Triggers -->
                                                        <DataTemplate.Triggers>
                                                            <DataTrigger Binding="{Binding IsGIF}" Value="True">
                                                                <!-- Sets the ContentTemplate to be GIFTemplate instead of StaticTemplate -->
                                                                <Setter TargetName="cc" Property="ContentTemplate" Value="{StaticResource GIFTemplate}"/>
                                                            </DataTrigger>
                                                        </DataTemplate.Triggers>
                                                    </DataTemplate>
                                                </ContentControl.ContentTemplate>
                                            </ContentControl>
                                        </DataTemplate>

                                        <!-- // VideoTemplate // -->
                                        <DataTemplate x:Key="VideoTemplate">
                                            <GroupBox adonisExtensions:LayerExtension.IncreaseLayer="False" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <ffme:MediaElement UnloadedBehavior="Manual" LoadedBehavior="Play" LoopingBehavior="Play" 
                                                               Loaded="MediaElement_OnLoaded" Unloaded="MediaElement_OnUnloaded"/>
                                            </GroupBox>
                                            <!--</Border>-->
                                        </DataTemplate>
                                    </ContentControl.Resources>

                                    <!-- // Template Control // -->
                                    <ContentControl.ContentTemplate>
                                        <DataTemplate>
                                            <!-- Default Control -->
                                            <ContentControl Name="cc" Content="{Binding }" ContentTemplate="{StaticResource StaticOrGIFTemplate}"/>
                                            <!-- Triggers -->
                                            <DataTemplate.Triggers>
                                                <!-- If IsVideo, use the VideoTemplate instead -->
                                                <DataTrigger Binding="{Binding IsVideo}" Value="True">
                                                    <Setter TargetName="cc" Property="ContentTemplate" Value="{StaticResource VideoTemplate}"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ContentControl.ContentTemplate>
                                </ContentControl>
                            </StackPanel>
                        </GroupBox>

                        <!-- Tags -->
                        <GroupBox Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="3"
                              adonisExtensions:LayerExtension.IncreaseLayer="True" adonisExtensions:LayerExtension.Layer="2">
                            <!-- Header -->
                            <GroupBox.Header>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="0"/>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="0"/>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="1" Grid.Column="2" HorizontalAlignment="Center" Text="Tags" FontWeight="Medium" Margin="0 0 0 5">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FaintHeader}"/>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </Grid>
                            </GroupBox.Header>

                            <!-- ListBox  -->
                            <ListBox ItemsSource="{Binding InspectedImageTags}" SelectionMode="Extended" Height="400"
                                 adonisExtensions:ScrollViewerExtension.HideScrollBarsUntilMouseOver="True"
                                 adonisExtensions:ScrollViewerExtension.VerticalScrollBarPlacement="Overlay"
                                 adonisExtensions:ScrollViewerExtension.VerticalScrollBarExpansionMode="ExpandOnHover"
                                 ScrollViewer.HorizontalScrollBarVisibility="Disabled">

                                <!-- Wrap Setup -->
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel IsItemsHost="True" Width="{StaticResource InspectorWidth}"/>
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>

                                <!-- Tags Item Template -->
                                <ListBox.ItemTemplate>
                                    <DataTemplate DataType="tagging:TagModel">
                                        <!-- The GroupBox adds a fitting adonis background to every tag -->
                                        <GroupBox  adonisExtensions:LayerExtension.IncreaseLayer="True" adonisExtensions:CornerRadiusExtension.CornerRadius="15">
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock VerticalAlignment="Center" Text="{Binding Name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                <Button VerticalAlignment="Center" Content="X"  Command="{Binding RemoveTagFromSelectedImageCommand}" 
                                                    Foreground="Red" FontSize="10" FontWeight="Medium" Margin="5 0 5 0"/>
                                            </StackPanel>
                                        </GroupBox>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </GroupBox>

                        <!-- Settings -->
                        <GroupBox Grid.Row="4" Grid.Column="1" Grid.ColumnSpan="3" Height="{StaticResource InspectorCategoryHeight}"
                                  adonisExtensions:LayerExtension.IncreaseLayer="True" adonisExtensions:LayerExtension.Layer="2">
                            <!-- Header -->
                            <GroupBox.Header>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="0"/>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="0"/>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="1" Grid.Column="2" HorizontalAlignment="Center" Text="Settings" FontWeight="Medium" Margin="0 0 0 5">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FaintHeader}"/>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </Grid>
                            </GroupBox.Header>

                            <StackPanel>

                            </StackPanel>

                        </GroupBox>

                    </Grid>
                </GroupBox>
            </ScrollViewer>
        </hc:Drawer>

    </Grid>
</views:MvxWpfView>